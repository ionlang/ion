#include <ionlang/const/grammar.h>

namespace ionlang {
    const std::map<TokenKind, std::string> Grammar::tokenKindNames = {
        {TokenKind::Unknown, "Unknown"},
        {TokenKind::Identifier, "identifier"},
        {TokenKind::LiteralString, "string literal"},
        {TokenKind::LiteralDecimal, "decimal literal"},
        {TokenKind::LiteralInteger, "integer literal"},
        {TokenKind::LiteralCharacter, "character literal"},
        {TokenKind::Whitespace, "whitespace"},
        {TokenKind::SymbolDollar, "dollar symbol"},
        {TokenKind::SymbolHash, "hash symbol"},
        {TokenKind::SymbolParenthesesL, "left parentheses symbol"},
        {TokenKind::SymbolParenthesesR, "right parentheses symbol"},
        {TokenKind::SymbolBracketL, "left bracket symbol"},
        {TokenKind::SymbolBracketR, "right bracket symbol"},
        {TokenKind::SymbolComma, "comma symbol"},
        {TokenKind::SymbolEqual, "equal symbol"},
        {TokenKind::SymbolSemiColon, "semi-colon symbol"},
        {TokenKind::SymbolBraceL, "left brace symbol"},
        {TokenKind::SymbolBraceR, "right brace symbol"},
        {TokenKind::SymbolArrow, "arrow symbol"},
        {TokenKind::SymbolAmpersand, "ampersand symbol"},
        {TokenKind::SymbolAt, "at symbol"},
        {TokenKind::SymbolEllipsis, "variable arguments symbol"},
        {TokenKind::KeywordFunction, "function keyword"},
        {TokenKind::KeywordExtern, "extern keyword"},
        {TokenKind::KeywordElse, "else keyword"},
        {TokenKind::KeywordGlobal, "global keyword"},
        {TokenKind::KeywordModule, "module keyword"},
        {TokenKind::KeywordUnsafe, "unsafe keyword"},
        {TokenKind::KeywordStruct, "struct keyword"},
        {TokenKind::KeywordReturn, "return keyword"},
        {TokenKind::KeywordLet, "let keyword"},
        {TokenKind::TypeVoid, "void type"},
        {TokenKind::TypeString, "string type"},
        {TokenKind::TypeInt16, "integer 16 type"},
        {TokenKind::TypeInt32, "integer 32 type"},
        {TokenKind::TypeInt64, "integer 64 type"},
        {TokenKind::QualifierConst, "const qualifier"},
        {TokenKind::QualifierMutable, "mutable qualifier"},
        {TokenKind::OperatorAddition, "addition operator"},
        {TokenKind::OperatorSubtraction, "subtraction operator"},
        {TokenKind::OperatorMultiplication, "multiplication operator"},
        {TokenKind::OperatorDivision, "division operator"},
        {TokenKind::OperatorModulo, "module operator"},
        {TokenKind::OperatorGreaterThan, "greater than operator"},
        {TokenKind::OperatorLessThan, "less than operator"}
    };
}
